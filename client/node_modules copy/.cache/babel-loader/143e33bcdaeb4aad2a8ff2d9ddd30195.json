{"ast":null,"code":"var _jsxFileName = \"/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect } from \"react\";\nimport AppReducer from \"./AppReducer\"; //initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\n  watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : []\n}; // create Context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // provider component\n\nexport const GlobalProvider = props => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); //store our movies in localStorage\n\n  useEffect(() => {\n    localStorage.setItem('watchlist', JSON.stringify(state.watchlist));\n    localStorage.setItem('watched', JSON.stringify(state.watched));\n  }, [state]); //actions\n\n  const add_Movie_to_watchlist = movie => {\n    dispatch({\n      type: \"ADD_MOVIE_TO_WATCHLIST\",\n      payload: movie\n    });\n  };\n\n  const remove_Movie_from_watchlist = id => {\n    dispatch({\n      type: \"REMOVE_MOVIE_FROM_WATCHLIST\",\n      payload: id\n    });\n  };\n\n  const add_Movie_to_watched = movie => {\n    dispatch({\n      type: \"ADD_MOVIE_TO_WATCHED\",\n      payload: movie\n    });\n  };\n\n  const move_to_watchlist = movie => {\n    dispatch({\n      type: \"MOVE_TO_WATCHLIST\",\n      payload: movie\n    });\n  };\n\n  const remove_from_watched = id => {\n    dispatch({\n      type: \"REMOVE_FROM_WATCHED\",\n      payload: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      watchlist: state.watchlist,\n      watched: state.watched,\n      add_Movie_to_watchlist,\n      remove_Movie_from_watchlist,\n      add_Movie_to_watched,\n      move_to_watchlist,\n      remove_from_watched\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalProvider, \"gZZ3TaNWFnk5pxLxmdKGLDXNo7Y=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/context/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","AppReducer","initialState","watchlist","localStorage","getItem","JSON","parse","watched","GlobalContext","GlobalProvider","props","state","dispatch","setItem","stringify","add_Movie_to_watchlist","movie","type","payload","remove_Movie_from_watchlist","id","add_Movie_to_watched","move_to_watchlist","remove_from_watched","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,aAAd,EAA6BC,UAA7B,EAAyCC,SAAzC,QAAyD,OAAzD;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAGA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GAAoF,EAD9E;AAEjBG,EAAAA,OAAO,EAAEJ,YAAY,CAACC,OAAb,CAAqB,SAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAlC,GAAgF;AAFxE,CAArB,C,CAKA;;AACA,OAAO,MAAMI,aAAa,gBAAGX,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMQ,cAAc,GAAIC,KAAD,IAAU;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBd,UAAU,CAACE,UAAD,EAAaC,YAAb,CAAnC,CADoC,CAGpC;;AACAF,EAAAA,SAAS,CAAC,MAAI;AACVI,IAAAA,YAAY,CAACU,OAAb,CAAqB,WAArB,EAAiCR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACT,SAArB,CAAjC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,SAArB,EAA+BR,IAAI,CAACS,SAAL,CAAeH,KAAK,CAACJ,OAArB,CAA/B;AACH,GAHQ,EAGP,CAACI,KAAD,CAHO,CAAT,CAJoC,CASpC;;AACA,QAAMI,sBAAsB,GAAIC,KAAD,IAAU;AACrCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC,wBAAN;AAAgCC,MAAAA,OAAO,EAAEF;AAAzC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMG,2BAA2B,GAAIC,EAAD,IAAO;AACvCR,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC,6BAAN;AAAqCC,MAAAA,OAAO,EAAEE;AAA9C,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,oBAAoB,GAAIL,KAAD,IAAU;AACnCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC,sBAAN;AAA8BC,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMM,iBAAiB,GAAIN,KAAD,IAAU;AAChCJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC,mBAAN;AAA2BC,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMO,mBAAmB,GAAIH,EAAD,IAAO;AAC/BR,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAC,qBAAN;AAA6BC,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACH,GAFD;;AAIA,sBACI,QAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHlB,MAAAA,SAAS,EAAES,KAAK,CAACT,SADd;AAEHK,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OAFZ;AAGHQ,MAAAA,sBAHG;AAIHI,MAAAA,2BAJG;AAKHE,MAAAA,oBALG;AAMHC,MAAAA,iBANG;AAOHC,MAAAA;AAPG,KADX;AAAA,cAUKb,KAAK,CAACc;AAVX;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAxCM;;GAAMf,c;;KAAAA,c","sourcesContent":["import React,{createContext, useReducer, useEffect} from \"react\";\nimport AppReducer from \"./AppReducer\";\n\n\n//initial state\nconst initialState = {\n    watchlist: localStorage.getItem('watchlist') ? JSON.parse(localStorage.getItem('watchlist')) : [],\n    watched: localStorage.getItem('watched') ? JSON.parse(localStorage.getItem('watched')) : [],\n};\n\n// create Context\nexport const GlobalContext = createContext(initialState);\n\n// provider component\nexport const GlobalProvider = (props) =>{\n    const [state,dispatch] = useReducer(AppReducer, initialState);\n\n    //store our movies in localStorage\n    useEffect(()=>{\n        localStorage.setItem('watchlist',JSON.stringify(state.watchlist))\n        localStorage.setItem('watched',JSON.stringify(state.watched))\n    },[state])\n\n    //actions\n    const add_Movie_to_watchlist = (movie) =>{\n        dispatch({type:\"ADD_MOVIE_TO_WATCHLIST\", payload: movie});\n    }\n    const remove_Movie_from_watchlist = (id) =>{\n        dispatch({type:\"REMOVE_MOVIE_FROM_WATCHLIST\", payload: id});\n    }\n    const add_Movie_to_watched = (movie) =>{\n        dispatch({type:\"ADD_MOVIE_TO_WATCHED\", payload: movie});\n    }\n    const move_to_watchlist = (movie) =>{\n        dispatch({type:\"MOVE_TO_WATCHLIST\", payload: movie});\n    }\n    const remove_from_watched = (id) =>{\n        dispatch({type:\"REMOVE_FROM_WATCHED\", payload: id})\n    }\n\n    return(\n        <GlobalContext.Provider\n            value={{\n                watchlist: state.watchlist,\n                watched: state.watched,\n                add_Movie_to_watchlist,\n                remove_Movie_from_watchlist,\n                add_Movie_to_watched,\n                move_to_watchlist,\n                remove_from_watched,\n            }}>\n            {props.children}\n        </GlobalContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}