{"ast":null,"code":"import { useEffect, useState, useContext } from 'react';\nimport { FirebaseContext } from '../context/firebase';\nexport default function useContent(target) {\n  const [content, setContent] = useState([]);\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  useEffect(() => {\n    firebase.firestore().collection(target).get().then(snapshot => {\n      const allContent = snapshot.docs.map(contentObj => ({ ...contentObj.data(),\n        docId: contentObj.id\n      }));\n      setContent(allContent);\n    }).catch(error => console.log(error.message));\n  }, []);\n  return {\n    [target]: content\n  };\n}","map":{"version":3,"sources":["/home/kim/GitHub/Portfolio/react/netflix-react/src/hooks/use-content.js"],"names":["useEffect","useState","useContext","FirebaseContext","useContent","target","content","setContent","firebase","firestore","collection","get","then","snapshot","allContent","docs","map","contentObj","data","docId","id","catch","error","console","log","message"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeN,UAAU,CAACC,eAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CACLC,SADH,GAEGC,UAFH,CAEcL,MAFd,EAGGM,GAHH,GAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,YAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,UAAD,KAAiB,EACpD,GAAGA,UAAU,CAACC,IAAX,EADiD;AAEpDC,QAAAA,KAAK,EAAEF,UAAU,CAACG;AAFkC,OAAjB,CAAlB,CAAnB;AAKAb,MAAAA,UAAU,CAACO,UAAD,CAAV;AACD,KAXH,EAYGO,KAZH,CAYUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB,CAZpB;AAaD,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAO;AAAE,KAACpB,MAAD,GAAUC;AAAZ,GAAP;AACD","sourcesContent":["import { useEffect, useState, useContext } from 'react';\nimport { FirebaseContext } from '../context/firebase';\n\nexport default function useContent(target) {\n  const [content, setContent] = useState([]);\n  const { firebase } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(target)\n      .get()\n      .then((snapshot) => {\n        const allContent = snapshot.docs.map((contentObj) => ({\n          ...contentObj.data(),\n          docId: contentObj.id,\n        }));\n\n        setContent(allContent);\n      })\n      .catch((error) => console.log(error.message));\n  }, []);\n\n  return { [target]: content };\n}\n"]},"metadata":{},"sourceType":"module"}