{"ast":null,"code":"import { useState, useEffect, useContext } from 'react';\nimport { FirebaseContext } from '../context/firebase';\nexport default function useAuthListener() {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  useEffect(() => {\n    const listner = firebase.auth().onAuthStateChanged(authUser => {\n      if (authUser) {\n        localStorage.setItem('authUser', JSON.stringify(authUser));\n        setUser(authUser);\n      } else {\n        localStorage.removeItem('authUser');\n        setUser(null);\n      }\n    });\n    return () => listner();\n  }, []);\n  return {\n    user\n  };\n}","map":{"version":3,"sources":["/home/kim/GitHub/Portfolio/react/netflix-react/src/hooks/use-auth-listener.js"],"names":["useState","useEffect","useContext","FirebaseContext","useAuthListener","user","setUser","JSON","parse","localStorage","getItem","firebase","listner","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACO,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAD,CAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeT,UAAU,CAACC,eAAD,CAA/B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAGD,QAAQ,CAACE,IAAT,GAAgBC,kBAAhB,CAAoCC,QAAD,IAAc;AAC/D,UAAIA,QAAJ,EAAc;AACZN,QAAAA,YAAY,CAACO,OAAb,CAAqB,UAArB,EAAiCT,IAAI,CAACU,SAAL,CAAeF,QAAf,CAAjC;AACAT,QAAAA,OAAO,CAACS,QAAD,CAAP;AACD,OAHD,MAGO;AACLN,QAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAZ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KARe,CAAhB;AAUA,WAAO,MAAMM,OAAO,EAApB;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAO;AAAEP,IAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { FirebaseContext } from '../context/firebase';\n\nexport default function useAuthListener() {\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('authUser')));\n  const { firebase } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    const listner = firebase.auth().onAuthStateChanged((authUser) => {\n      if (authUser) {\n        localStorage.setItem('authUser', JSON.stringify(authUser));\n        setUser(authUser);\n      } else {\n        localStorage.removeItem('authUser');\n        setUser(null);\n      }\n    });\n\n    return () => listner();\n  }, []);\n\n  return { user };\n}\n"]},"metadata":{},"sourceType":"module"}