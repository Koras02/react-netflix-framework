{"ast":null,"code":"var _jsxFileName = \"/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/pages/signin.js\";\nimport React, { useContext, useState } from 'react';\nimport { HeaderContainer } from '../containers/header';\nimport { Form } from \"../components\";\nimport { FirebaseContext } from '../context/firebase';\nimport { useHistory } from 'react-router';\nimport * as ROUTES from '../constants/routes';\nimport { FooterContainer } from '../containers/footer';\nexport default function SignIn() {\n  // 이메일 주소 비밀 번호 \n  const history = useHistory();\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  const [emailAddress, setEmailAddress] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false); // 핸드폰 번호 이메일 && 핸드폰번호 비밀번호 입력 방식 \n\n  const isInvalid = password === '' || emailAddress === '';\n\n  async function handleSignIn(e) {\n    e.preventDefault(); // 로그인 방식 auth 접속후 Email과 Password 입력 \n    // 입력완료시 history 로 Router가 설정된 Browse 사이트로 이동\n\n    firebase.auth().signInWithEmailAndPassword(emailAddress, password).then(() => {\n      history.push(ROUTES.BROWSE);\n    }).catch(error => {\n      setError(error.massage); // 패스워드와 이메일 주소를 입력하지않거나 맞지 않을 경우 오류\n\n      setEmailAddress('');\n      setPassword('');\n      setError(error.message);\n    });\n  }\n\n  ; // 로그인 구현 \n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HeaderContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, \"\\uB85C\\uADF8\\uC778\"), error && /*#__PURE__*/React.createElement(Form.Error, {\n    \"data-testid\": \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"\\uC8C4\\uC1A1\\uD569\\uB2C8\\uB2E4. \\uC774 \\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uACC4\\uC815\\uC744 \\uCC3E\\uC744\\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD558\\uC2DC\\uAC70\\uB098\", /*#__PURE__*/React.createElement(Form.Link2, {\n    to: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"\\uC0C8\\uB85C\\uC6B4 \\uACC4\\uC815\\uC744 \\uB4F1\\uB85D\"), \"\\uD558\\uC138\\uC694.\"), /*#__PURE__*/React.createElement(Form.Base, {\n    onSubmit: handleSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    placeholder: \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C \\uB610\\uB294 \\uC804\\uD654 \\uBC88\\uD638\",\n    type: \"email\",\n    value: emailAddress,\n    onChange: e => setEmailAddress(e.target.value),\n    enabled: isInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n    type: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    autoComplete: \"false\",\n    enabled: isInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Submit, {\n    type: \"submit\",\n    disabled: isInvalid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"\\uB85C\\uADF8\\uC778\")), /*#__PURE__*/React.createElement(Form.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"Netflix \\uD68C\\uC6D0\\uC774 \\uC544\\uB2CC\\uAC00\\uC694? \", /*#__PURE__*/React.createElement(Form.Link, {\n    to: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 35\n    }\n  }, \"\\uC9C0\\uAE08 \\uAC00\\uC785\\uD558\\uC138\\uC694\")), /*#__PURE__*/React.createElement(Form.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"\\uC774 \\uD398\\uC774\\uC9C0\\uB294 Google reCAPTCHA\\uC758 \\uBCF4\\uD638\\uB97C \\uBC1B\\uC544 \\uC0AC\\uC6A9\\uC790\\uAC00 \\uB85C\\uBD07\\uC774 \\uC544\\uB2D8\\uC744 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4. \", /*#__PURE__*/React.createElement(Form.AboutLink, {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 71\n    }\n  }, \"\\uC790\\uC138\\uD788 \\uC54C\\uC544\\uBCF4\\uAE30\")))), /*#__PURE__*/React.createElement(FooterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/pages/signin.js"],"names":["React","useContext","useState","HeaderContainer","Form","FirebaseContext","useHistory","ROUTES","FooterContainer","SignIn","history","firebase","emailAddress","setEmailAddress","phoneNumber","setPhoneNumber","password","setPassword","error","setError","loading","setLoading","isInvalid","handleSignIn","e","preventDefault","auth","signInWithEmailAndPassword","then","push","BROWSE","catch","massage","message","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { HeaderContainer } from '../containers/header';\nimport { Form } from \"../components\";\nimport { FirebaseContext } from '../context/firebase';\nimport { useHistory } from 'react-router';\nimport * as ROUTES from '../constants/routes';\nimport { FooterContainer } from '../containers/footer';\n\n\nexport default function  SignIn() {\n\n    // 이메일 주소 비밀 번호 \n    const history = useHistory();\n    const { firebase } = useContext(FirebaseContext);\n    const [emailAddress, setEmailAddress] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    // 핸드폰 번호 이메일 && 핸드폰번호 비밀번호 입력 방식 \n    const isInvalid = password === '' || emailAddress === '' \n\n    async function handleSignIn (e)  {\n       e.preventDefault();\n\n       // 로그인 방식 auth 접속후 Email과 Password 입력 \n       // 입력완료시 history 로 Router가 설정된 Browse 사이트로 이동\n       firebase\n         .auth()\n         .signInWithEmailAndPassword(emailAddress,password)\n \n         .then(() => {\n             history.push(ROUTES.BROWSE);\n         })\n         .catch((error) => {\n             setError(error.massage);\n             // 패스워드와 이메일 주소를 입력하지않거나 맞지 않을 경우 오류\n             setEmailAddress('');\n           \n             setPassword('');\n             setError(error.message);\n         });        \n    };\n\n    // 로그인 구현 \n    return (\n       <>\n         <HeaderContainer>\n            <Form>\n              <Form.Title>로그인</Form.Title>\n              {/* 로그인 실패시 에러 */}\n              {error && <Form.Error data-testid=\"error\">죄송합니다. 이 이메일 주소를 사용하는 계정을 찾을수 없습니다. 다시 시도하시거나 \n              <Form.Link2 to=\"/signup\">새로운 계정을 등록\n              </Form.Link2>\n              하세요.</Form.Error>}\n          \n              <Form.Base onSubmit={handleSignIn}>\n                 <Form.Input \n                    placeholder=\"이메일 주소 또는 전화 번호\"  \n                    type=\"email\"\n                    value={emailAddress}\n                    onChange={(e) => setEmailAddress(e.target.value)} \n                   \n                    enabled={isInvalid}\n                />\n\n                <Form.Input \n                   placeholder=\"비밀번호\"\n                   type=\"password\"\n                   value={password}\n                   onChange={(e) => setPassword(e.target.value)}\n                   autoComplete=\"false\"\n                   enabled={isInvalid}\n              \n                />\n\n                <Form.Submit type=\"submit\" disabled={isInvalid}>\n                    로그인\n                </Form.Submit>\n              </Form.Base>\n              <Form.Text>\n                Netflix 회원이 아닌가요? <Form.Link to=\"/signup\">지금 가입하세요</Form.Link>\n              </Form.Text>\n              <Form.Text>\n                  이 페이지는 Google reCAPTCHA의 보호를 받아 사용자가 로봇이 아님을 확인합니다. <Form.AboutLink href=\"\">자세히 알아보기</Form.AboutLink>\n              </Form.Text>\n            </Form>\n         </HeaderContainer>\n            <FooterContainer/>\n       </>  \n    )\n}\n\n "]},"metadata":{},"sourceType":"module"}