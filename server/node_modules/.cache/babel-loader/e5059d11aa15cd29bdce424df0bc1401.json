{"ast":null,"code":"var _jsxFileName = \"/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/pages/signup.js\";\nimport React, { useContext, useState } from 'react';\nimport { HeaderContainer } from '../containers/header';\nimport { Form } from \"../components\";\nimport { FirebaseContext } from '../context/firebase';\nimport { useHistory } from 'react-router';\nimport * as ROUTES from '../constants/routes';\nimport { FooterContainer } from '../containers/footer';\nexport default function SignUp() {\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  const history = useHistory(); // 이메일 주소 비밀 번호 \n\n  const [firstName, setFirstName] = useState('');\n  const [emailAddress, setEmailAddress] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(''); // 핸드폰 번호 이메일 && 핸드폰번호 비밀번호 입력 방식 \n\n  const isInvalid = firstName == '' || emailAddress === '' || password === '';\n\n  async function handleSignIn(e) {\n    e.preventDefault(); // 로그인 방식 auth 접속후 Email과 Password 입력 \n    // 입력완료시 history 로 Router가 설정된 Browse 사이트로 이동\n\n    firebase.auth().signInWithEmailAndPassword(emailAddress, password) //  .signInPhoneNumber(phoneNumber.password)\n    .then(result => {\n      result.user.updateProfile({\n        displayName: firstName,\n        photoURL: Math.floor(Math.random() * 5 + 1)\n      });\n    }).then(() => {\n      history.push(ROUTES.BROWSE);\n    }).catch(error => {\n      setError(error.massage); // 패스워드와 이메일 주소를 입력하지않거나 맞지 않을 경우 오류\n\n      setFirstName('');\n      setEmailAddress('');\n      setPassword('');\n      setError(error.message);\n    });\n  }\n\n  ; // 로그인 구현 \n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HeaderContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"\\uD68C\\uC6D0 \\uAC00\\uC785\"), error && /*#__PURE__*/React.createElement(Form.Error, {\n    \"data-testid\": \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"\\uD604\\uC7AC \\uC0AC\\uC6A9\\uC911\\uC778 \\uC774\\uBA54\\uC77C\\uC774\\uAC70\\uB098 \\uBE44\\uBC00\\uBC88\\uD638 \\uC624\\uB958\\uC785\\uB2C8\\uB2E4.\"), /*#__PURE__*/React.createElement(Form.Base, {\n    onSubmit: handleSignIn,\n    method: \"POST\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Input, {\n    placeholder: \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C \\uB610\\uB294 \\uC804\\uD654 \\uBC88\\uD638\",\n    type: \"email\",\n    value: emailAddress,\n    onChange: e => setEmailAddress(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    placeholder: \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C \\uB610\\uB294 \\uC804\\uD654 \\uBC88\\uD638\",\n    type: \"email\",\n    value: emailAddress,\n    onChange: e => setEmailAddress(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(Form.Input, {\n    type: \"password\",\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n    autoComplate: \"off\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Submit, {\n    type: \"submit\",\n    disabled: isInvalid,\n    \"data-testid\": \"sign-up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")), /*#__PURE__*/React.createElement(Form.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"Netflix \\uD68C\\uC6D0\\uC774 \\uC544\\uB2CC\\uAC00\\uC694? \", /*#__PURE__*/React.createElement(Form.Link, {\n    to: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 35\n    }\n  }, \"\\uC9C0\\uAE08 \\uAC00\\uC785\\uD558\\uC138\\uC694\")), /*#__PURE__*/React.createElement(Form.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, \"\\uC774 \\uD398\\uC774\\uC9C0\\uB294 Google reCAPTCHA\\uC758 \\uBCF4\\uD638\\uB97C \\uBC1B\\uC544 \\uC0AC\\uC6A9\\uC790\\uAC00 \\uB85C\\uBD07\\uC774 \\uC544\\uB2D8\\uC744 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4. \", /*#__PURE__*/React.createElement(Form.AboutLink, {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 71\n    }\n  }, \"\\uC790\\uC138\\uD788 \\uC54C\\uC544\\uBCF4\\uAE30\")))), /*#__PURE__*/React.createElement(FooterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/kim/GitHub/Portfolio/react/movie-netflix-framework/client/src/pages/signup.js"],"names":["React","useContext","useState","HeaderContainer","Form","FirebaseContext","useHistory","ROUTES","FooterContainer","SignUp","firebase","history","firstName","setFirstName","emailAddress","setEmailAddress","password","setPassword","error","setError","isInvalid","handleSignIn","e","preventDefault","auth","signInWithEmailAndPassword","then","result","user","updateProfile","displayName","photoURL","Math","floor","random","push","BROWSE","catch","massage","message","target","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { HeaderContainer } from '../containers/header';\nimport { Form } from \"../components\";\nimport { FirebaseContext } from '../context/firebase';\nimport { useHistory } from 'react-router';\nimport * as ROUTES from '../constants/routes';\nimport { FooterContainer } from '../containers/footer';\n\n\nexport default function  SignUp() {\n    const { firebase } = useContext(FirebaseContext);\n    const history = useHistory();\n    \n    // 이메일 주소 비밀 번호 \n    const [firstName, setFirstName] = useState('');\n    const [emailAddress, setEmailAddress] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n \n\n    // 핸드폰 번호 이메일 && 핸드폰번호 비밀번호 입력 방식 \n    const isInvalid = firstName == '' || emailAddress === '' || password === ''\n\n    async function handleSignIn (e)  {\n       e.preventDefault();\n\n       // 로그인 방식 auth 접속후 Email과 Password 입력 \n       // 입력완료시 history 로 Router가 설정된 Browse 사이트로 이동\n       firebase\n         .auth()\n         .signInWithEmailAndPassword(emailAddress,password)\n        //  .signInPhoneNumber(phoneNumber.password)\n         .then(result => {\n             result.user.updateProfile({\n                 displayName: firstName,\n                 photoURL: Math.floor(Math.random() * 5 + 1)\n             })\n         })\n\n         .then(() => {\n             history.push(ROUTES.BROWSE)\n         })\n         \n         .catch((error) => {\n             setError(error.massage);\n             // 패스워드와 이메일 주소를 입력하지않거나 맞지 않을 경우 오류\n             setFirstName('')\n             setEmailAddress('');\n             setPassword('');\n             setError(error.message);\n         });        \n    };\n\n    // 로그인 구현 \n    return (\n       <>\n         <HeaderContainer>\n            <Form>\n              <Form.Title>회원 가입</Form.Title>\n              {/* 로그인 실패시 에러 */}\n              {error && <Form.Error data-testid=\"error\">현재 사용중인 이메일이거나 비밀번호 오류입니다.\n              </Form.Error>}\n          \n              <Form.Base onSubmit={handleSignIn} method=\"POST\">\n              <Form.Input \n                    placeholder=\"이메일 주소 또는 전화 번호\"  \n                    type=\"email\"\n                    value={emailAddress}\n                    onChange={(e) => setEmailAddress(e.target.value)} \n                   \n         \n                />\n\n                 <Form.Input \n                    placeholder=\"이메일 주소 또는 전화 번호\"  \n                    type=\"email\"\n                    value={emailAddress}\n                    onChange={(e) => setEmailAddress(e.target.value)} \n                   \n               \n                />\n\n                <Form.Input \n                   type=\"password\"\n                   placeholder=\"비밀번호\"\n                   autoComplate='off'\n                   value={password}\n                   onChange={(e) => setPassword(e.target.value)}\n             \n                />\n\n                <Form.Submit type=\"submit\" disabled={isInvalid} data-testid=\"sign-up\">\n                   회원가입\n                </Form.Submit>\n              </Form.Base>\n              <Form.Text>\n                Netflix 회원이 아닌가요? <Form.Link to=\"/signup\">지금 가입하세요</Form.Link>\n              </Form.Text>\n              <Form.Text>\n                  이 페이지는 Google reCAPTCHA의 보호를 받아 사용자가 로봇이 아님을 확인합니다. <Form.AboutLink href=\"\">자세히 알아보기</Form.AboutLink>\n              </Form.Text>\n            </Form>\n         </HeaderContainer>\n            <FooterContainer/>\n       </>  \n    )\n}\n\n "]},"metadata":{},"sourceType":"module"}